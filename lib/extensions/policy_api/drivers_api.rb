=begin
#Policy API

#This API manages interactions with the policy management system.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module PolicyAPI
  class DriversApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Driver Info
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @option opts [Driver] :driver Driver
    # @return [Driver]
    def create(policy_activity_id, opts = {})
      data, _status_code, _headers = create_with_http_info(policy_activity_id, opts)
      data
    end

    # Create Driver Info
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @option opts [Driver] :driver Driver
    # @return [Array<(Driver, Fixnum, Hash)>] Driver data, response status code and response headers
    def create_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DriversApi.create ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling DriversApi.create"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/drivers'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'basic_info'])
      auth_names = opts[:auth_names] || ['Bearer']

      # return_type
      return_type = opts[:return_type] || 'Driver'

      new_options = opts.merge(
          :header_params => header_params,
          :query_params => query_params,
          :form_params => form_params,
          :body => post_body,
          :auth_names => auth_names,
          :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)

      # data, status_code, headers = @api_client.call_api(:POST, local_var_path,
      #   :header_params => header_params,
      #   :query_params => query_params,
      #   :form_params => form_params,
      #   :body => post_body,
      #   :auth_names => auth_names,
      #   :return_type => 'Driver')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DriversApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets driver details for the given policy activity id and driver id
    # @param policy_activity_id policy activity id
    # @param driver_id Driver Id
    # @param [Hash] opts the optional parameters
    # @return [Driver]
    def get(policy_activity_id, driver_id, opts = {})
      data, _status_code, _headers = get_with_http_info(policy_activity_id, driver_id, opts)
      data
    end

    # Gets driver details for the given policy activity id and driver id
    # @param policy_activity_id policy activity id
    # @param driver_id Driver Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Driver, Fixnum, Hash)>] Driver data, response status code and response headers
    def get_with_http_info(policy_activity_id, driver_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DriversApi.get ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling DriversApi.get"
      end
      # verify the required parameter 'driver_id' is set
      if @api_client.config.client_side_validation && driver_id.nil?
        fail ArgumentError, "Missing the required parameter 'driver_id' when calling DriversApi.get"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/drivers/{driverId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'driverId' + '}', driver_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Driver')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DriversApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets all drivers with 'NewDriver' status for the given policy activity id
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<DriverSummary>]
    def get_all(policy_activity_id, opts = {})
      data, _status_code, _headers = get_all_with_http_info(policy_activity_id, opts)
      data
    end

    # Gets all drivers with &#39;NewDriver&#39; status for the given policy activity id
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DriverSummary>, Fixnum, Hash)>] Array<DriverSummary> data, response status code and response headers
    def get_all_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DriversApi.get_all ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling DriversApi.get_all"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/drivers'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DriverSummary>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DriversApi#get_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets all drivers for the given policy activity id and by Status
    # @param policy_activity_id policy activity id
    # @param status driver status
    # @param [Hash] opts the optional parameters
    # @return [Array<DriverSummary>]
    def get_all_0(policy_activity_id, status, opts = {})
      data, _status_code, _headers = get_all_0_with_http_info(policy_activity_id, status, opts)
      data
    end

    # Gets all drivers for the given policy activity id and by Status
    # @param policy_activity_id policy activity id
    # @param status driver status
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DriverSummary>, Fixnum, Hash)>] Array<DriverSummary> data, response status code and response headers
    def get_all_0_with_http_info(policy_activity_id, status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DriversApi.get_all_0 ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling DriversApi.get_all_0"
      end
      # verify the required parameter 'status' is set
      if @api_client.config.client_side_validation && status.nil?
        fail ArgumentError, "Missing the required parameter 'status' when calling DriversApi.get_all_0"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/drivers/{status}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'status' + '}', status.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DriverSummary>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DriversApi#get_all_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Driver Info
    # @param policy_activity_id policy activity id
    # @param driver_id Driver Id
    # @param [Hash] opts the optional parameters
    # @option opts [Driver] :driver Driver
    # @return [Driver]
    def update(policy_activity_id, driver_id, opts = {})
      data, _status_code, _headers = update_with_http_info(policy_activity_id, driver_id, opts)
      data
    end

    # Update Driver Info
    # @param policy_activity_id policy activity id
    # @param driver_id Driver Id
    # @param [Hash] opts the optional parameters
    # @option opts [Driver] :driver Driver
    # @return [Array<(Driver, Fixnum, Hash)>] Driver data, response status code and response headers
    def update_with_http_info(policy_activity_id, driver_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DriversApi.update ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling DriversApi.update"
      end
      # verify the required parameter 'driver_id' is set
      if @api_client.config.client_side_validation && driver_id.nil?
        fail ArgumentError, "Missing the required parameter 'driver_id' when calling DriversApi.update"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/drivers/{driverId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'driverId' + '}', driver_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'driver'])
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Driver')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DriversApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
