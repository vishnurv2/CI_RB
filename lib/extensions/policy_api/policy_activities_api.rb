=begin
#Policy API

#This API manages interactions with the policy management system.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module PolicyAPI
  class PolicyActivitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete policy activity and corresponding quote option activities if exists
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(policy_activity_id, opts = {})
      delete_with_http_info(policy_activity_id, opts)
      nil
    end

    # Delete policy activity and corresponding quote option activities if exists
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyActivitiesApi.delete ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling PolicyActivitiesApi.delete"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyActivitiesApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # To get next risk item unit number
    # @param policy_activity_id Policy activity id
    # @param risk_item_type Risk term type
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def get_next_unit_number(policy_activity_id, risk_item_type, opts = {})
      data, _status_code, _headers = get_next_unit_number_with_http_info(policy_activity_id, risk_item_type, opts)
      data
    end

    # To get next risk item unit number
    # @param policy_activity_id Policy activity id
    # @param risk_item_type Risk term type
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def get_next_unit_number_with_http_info(policy_activity_id, risk_item_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyActivitiesApi.get_next_unit_number ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling PolicyActivitiesApi.get_next_unit_number"
      end
      # verify the required parameter 'risk_item_type' is set
      if @api_client.config.client_side_validation && risk_item_type.nil?
        fail ArgumentError, "Missing the required parameter 'risk_item_type' when calling PolicyActivitiesApi.get_next_unit_number"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/{riskItemType}/nextunitnumber'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'riskItemType' + '}', risk_item_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyActivitiesApi#get_next_unit_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # To get policy activity
    # @param policy_activity_id Policy activity id
    # @param [Hash] opts the optional parameters
    # @return [PolicyActivity]
    def get_policy_activity_by_activity_id(policy_activity_id, opts = {})
      data, _status_code, _headers = get_policy_activity_by_activity_id_with_http_info(policy_activity_id, opts)
      data
    end

    # To get policy activity
    # @param policy_activity_id Policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyActivity, Fixnum, Hash)>] PolicyActivity data, response status code and response headers
    def get_policy_activity_by_activity_id_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyActivitiesApi.get_policy_activity_by_activity_id ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling PolicyActivitiesApi.get_policy_activity_by_activity_id"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyActivity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyActivitiesApi#get_policy_activity_by_activity_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create policy activity **** DREW ADDITION *******
    # @param [Hash] opts the optional parameters
    # @option opts [CentralEntCoreFrameworkServiceLibraryApiModelPolicyActivity] :central_ent_core_framework_service_library_api_model_policy_activity Policy activity
    # @return [Array<(CentralEntCoreFrameworkServiceLibraryApiModelPolicyActivity, Integer, Hash)>] CentralEntCoreFrameworkServiceLibraryApiModelPolicyActivity data, response status code and response headers
    def v1_policy_activities_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyActivitiesApi.v1_policy_activities_post ...'
      end
      # resource path
      #
      local_var_path = '/v1/policy_activities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/plain', 'application/octet-stream', 'application/json-patch+json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'central_ent_core_framework_service_library_api_model_policy_activity'])

      # return_type
      return_type = opts[:return_type] || 'CentralEntCoreFrameworkServiceLibraryApiModelPolicyActivity'

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
          :header_params => header_params,
          :query_params => query_params,
          :form_params => form_params,
          :body => post_body,
          :auth_names => auth_names,
          :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api_special(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyActivitiesApi#v1_policy_activities_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rate Acord.  Another Drew addition!!!
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body acord request
    # @return [Array<(CentralEntThirdPartyDataModelAcordConvertToAcordResponse, Integer, Hash)>] CentralEntThirdPartyDataModelAcordConvertToAcordResponse data, response status code and response headers
    def v1_policy_activities_rate_acord_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyActivitiesApi.v1_policy_activities_rate_acord_post ...'
      end
      # resource path
      local_var_path = '/v1/policy_activities/rate_acord'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # HTTP header 'Content-Type'
      #header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/plain', 'application/octet-stream', 'application/json-patch+json', 'text/json', 'application/*+json'])
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:return_type] || 'CentralEntThirdPartyDataModelAcordConvertToAcordResponse'

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
          :header_params => header_params,
          :query_params => query_params,
          :form_params => form_params,
          :body => post_body,
          :auth_names => auth_names,
          :return_type => 'String'
      )

      data, status_code, headers = @api_client.call_api_special(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyActivitiesApi#v1_policy_activities_rate_acord_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update policy activity status
    # @param policy_activity_id Policy activity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Policy status
    # @return [BOOLEAN]
    def update_policy_activity_status(policy_activity_id, opts = {})
      data, _status_code, _headers = update_policy_activity_status_with_http_info(policy_activity_id, opts)
      data
    end

    # Update policy activity status
    # @param policy_activity_id Policy activity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Policy status
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def update_policy_activity_status_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyActivitiesApi.update_policy_activity_status ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling PolicyActivitiesApi.update_policy_activity_status"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/actions/status'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyActivitiesApi#update_policy_activity_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Added new code here for v1
    # Issue the policy activities
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :request_body Policy activity Ids
    # @return [Array<(Array<CentralEntCoreFrameworkServiceLibraryApiModelIssueQuoteResponse>, Integer, Hash)>] Array<CentralEntCoreFrameworkServiceLibraryApiModelIssueQuoteResponse> data, response status code and response headers
    def policy_activities_actions_issue_quotes_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyActivitiesApi.v1_policy_activities_actions_issue_quotes_post ...'
      end
      # resource path
      local_var_path = '/v1/policy_activities/actions/issue_quotes'
      # query parameters
      query_params = opts[:query_params] || {}
      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/plain', 'application/octet-stream', 'application/json-patch+json', 'text/json', 'application/*+json'])
      # form parameters
      form_params = opts[:form_params] || {}
      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])
      # return_type
      return_type = opts[:debug_return_type] || 'Array<CentralEntCoreFrameworkServiceLibraryApiModelIssueQuoteResponse>'
      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']
      new_options = opts.merge(
        :operation => :"PolicyActivitiesApi.v1_policy_activities_actions_issue_quotes_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )
      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyActivitiesApi#v1_policy_activities_actions_issue_quotes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
