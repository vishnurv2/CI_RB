=begin
#Policy API

#This API manages interactions with the policy management system.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module PolicyAPI
  class CoveragesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a coverage on a policy
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @option opts [Coverage] :coverage coverage info
    # @return [Coverage]
    def create(policy_activity_id, opts = {})
      data, _status_code, _headers = create_with_http_info(policy_activity_id, opts)
      data
    end

    # Create a coverage on a policy
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @option opts [Coverage] :coverage coverage info
    # @return [Array<(Coverage, Fixnum, Hash)>] Coverage data, response status code and response headers
    def create_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.create ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.create"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/coverages'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'coverage'])
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Coverage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a coverage on a risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id riskitem id
    # @param [Hash] opts the optional parameters
    # @option opts [Coverage] :coverage coverage info
    # @return [Coverage]
    def create_for_risk_item(policy_activity_id, risk_item_id, opts = {})
      data, _status_code, _headers = create_for_risk_item_with_http_info(policy_activity_id, risk_item_id, opts)
      data
    end

    # Create a coverage on a risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id riskitem id
    # @param [Hash] opts the optional parameters
    # @option opts [Coverage] :coverage coverage info
    # @return [Array<(Coverage, Fixnum, Hash)>] Coverage data, response status code and response headers
    def create_for_risk_item_with_http_info(policy_activity_id, risk_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.create_for_risk_item ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.create_for_risk_item"
      end
      # verify the required parameter 'risk_item_id' is set
      if @api_client.config.client_side_validation && risk_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'risk_item_id' when calling CoveragesApi.create_for_risk_item"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/riskitems/{riskItemId}/coverages'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'riskItemId' + '}', risk_item_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'coverage'])
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Coverage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#create_for_risk_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a coverage on a policy
    # @param policy_activity_id policy activity id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(policy_activity_id, coverage_id, opts = {})
      delete_with_http_info(policy_activity_id, coverage_id, opts)
      nil
    end

    # Delete a coverage on a policy
    # @param policy_activity_id policy activity id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(policy_activity_id, coverage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.delete ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.delete"
      end
      # verify the required parameter 'coverage_id' is set
      if @api_client.config.client_side_validation && coverage_id.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_id' when calling CoveragesApi.delete"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/coverages/{coverageId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'coverageId' + '}', coverage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a coverage on a risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id riskItem id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_for_risk_item(policy_activity_id, risk_item_id, coverage_id, opts = {})
      delete_for_risk_item_with_http_info(policy_activity_id, risk_item_id, coverage_id, opts)
      nil
    end

    # Delete a coverage on a risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id riskItem id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_for_risk_item_with_http_info(policy_activity_id, risk_item_id, coverage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.delete_for_risk_item ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.delete_for_risk_item"
      end
      # verify the required parameter 'risk_item_id' is set
      if @api_client.config.client_side_validation && risk_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'risk_item_id' when calling CoveragesApi.delete_for_risk_item"
      end
      # verify the required parameter 'coverage_id' is set
      if @api_client.config.client_side_validation && coverage_id.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_id' when calling CoveragesApi.delete_for_risk_item"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/riskitems/{riskItemId}/coverages/{coverageId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'riskItemId' + '}', risk_item_id.to_s).sub('{' + 'coverageId' + '}', coverage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#delete_for_risk_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific coverage for policy
    # @param policy_activity_id policy activity id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @return [Coverage]
    def get(policy_activity_id, coverage_id, opts = {})
      data, _status_code, _headers = get_with_http_info(policy_activity_id, coverage_id, opts)
      data
    end

    # Get a specific coverage for policy
    # @param policy_activity_id policy activity id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coverage, Fixnum, Hash)>] Coverage data, response status code and response headers
    def get_with_http_info(policy_activity_id, coverage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.get ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.get"
      end
      # verify the required parameter 'coverage_id' is set
      if @api_client.config.client_side_validation && coverage_id.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_id' when calling CoveragesApi.get"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/coverages/{coverageId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'coverageId' + '}', coverage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Coverage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all coverages for policy
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<Coverage>]
    def get_all(policy_activity_id, opts = {})
      data, _status_code, _headers = get_all_with_http_info(policy_activity_id, opts)
      data
    end

    # Get all coverages for policy
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Coverage>, Fixnum, Hash)>] Array<Coverage> data, response status code and response headers
    def get_all_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.get_all ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.get_all"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/coverages'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Coverage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#get_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all coverages for risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id riskitem id
    # @param [Hash] opts the optional parameters
    # @return [Array<Coverage>]
    def get_all_for_risk_item(policy_activity_id, risk_item_id, opts = {})
      data, _status_code, _headers = get_all_for_risk_item_with_http_info(policy_activity_id, risk_item_id, opts)
      data
    end

    # Get all coverages for risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id riskitem id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Coverage>, Fixnum, Hash)>] Array<Coverage> data, response status code and response headers
    def get_all_for_risk_item_with_http_info(policy_activity_id, risk_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.get_all_for_risk_item ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.get_all_for_risk_item"
      end
      # verify the required parameter 'risk_item_id' is set
      if @api_client.config.client_side_validation && risk_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'risk_item_id' when calling CoveragesApi.get_all_for_risk_item"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/riskitems/{riskItemId}/coverages'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'riskItemId' + '}', risk_item_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Coverage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#get_all_for_risk_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific coverage for risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id risk item id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @return [Coverage]
    def get_for_risk_item(policy_activity_id, risk_item_id, coverage_id, opts = {})
      data, _status_code, _headers = get_for_risk_item_with_http_info(policy_activity_id, risk_item_id, coverage_id, opts)
      data
    end

    # Get a specific coverage for risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id risk item id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coverage, Fixnum, Hash)>] Coverage data, response status code and response headers
    def get_for_risk_item_with_http_info(policy_activity_id, risk_item_id, coverage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.get_for_risk_item ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.get_for_risk_item"
      end
      # verify the required parameter 'risk_item_id' is set
      if @api_client.config.client_side_validation && risk_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'risk_item_id' when calling CoveragesApi.get_for_risk_item"
      end
      # verify the required parameter 'coverage_id' is set
      if @api_client.config.client_side_validation && coverage_id.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_id' when calling CoveragesApi.get_for_risk_item"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/riskitems/{riskItemId}/coverages/{coverageId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'riskItemId' + '}', risk_item_id.to_s).sub('{' + 'coverageId' + '}', coverage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Coverage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#get_for_risk_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get coverage master data for policy
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_master_data(policy_activity_id, opts = {})
      get_master_data_with_http_info(policy_activity_id, opts)
      nil
    end

    # Get coverage master data for policy
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_master_data_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.get_master_data ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.get_master_data"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/coverages/masterdata'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#get_master_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Coverage on a policy
    # @param policy_activity_id policy activity id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @option opts [Coverage] :coverage coverage info
    # @return [Coverage]
    def update(policy_activity_id, coverage_id, opts = {})
      data, _status_code, _headers = update_with_http_info(policy_activity_id, coverage_id, opts)
      data
    end

    # Update a Coverage on a policy
    # @param policy_activity_id policy activity id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @option opts [Coverage] :coverage coverage info
    # @return [Array<(Coverage, Fixnum, Hash)>] Coverage data, response status code and response headers
    def update_with_http_info(policy_activity_id, coverage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.update ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.update"
      end
      # verify the required parameter 'coverage_id' is set
      if @api_client.config.client_side_validation && coverage_id.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_id' when calling CoveragesApi.update"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/coverages/{coverageId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'coverageId' + '}', coverage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'coverage'])
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Coverage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Coverage on a risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id riskitem id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @option opts [Coverage] :coverage coverage info
    # @return [Coverage]
    def update_for_risk_item(policy_activity_id, risk_item_id, coverage_id, opts = {})
      data, _status_code, _headers = update_for_risk_item_with_http_info(policy_activity_id, risk_item_id, coverage_id, opts)
      data
    end

    # Update a Coverage on a risk item
    # @param policy_activity_id policy activity id
    # @param risk_item_id riskitem id
    # @param coverage_id coverage id
    # @param [Hash] opts the optional parameters
    # @option opts [Coverage] :coverage coverage info
    # @return [Array<(Coverage, Fixnum, Hash)>] Coverage data, response status code and response headers
    def update_for_risk_item_with_http_info(policy_activity_id, risk_item_id, coverage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoveragesApi.update_for_risk_item ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CoveragesApi.update_for_risk_item"
      end
      # verify the required parameter 'risk_item_id' is set
      if @api_client.config.client_side_validation && risk_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'risk_item_id' when calling CoveragesApi.update_for_risk_item"
      end
      # verify the required parameter 'coverage_id' is set
      if @api_client.config.client_side_validation && coverage_id.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_id' when calling CoveragesApi.update_for_risk_item"
      end
      # resource path
      local_var_path = '/v1/policy_activities/{policyActivityId}/riskitems/{riskItemId}/coverages/{coverageId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'riskItemId' + '}', risk_item_id.to_s).sub('{' + 'coverageId' + '}', coverage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'coverage'])
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Coverage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoveragesApi#update_for_risk_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
