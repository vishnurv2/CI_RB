=begin
#Policy API

#This API manages interactions with the policy management system.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module PolicyAPI
  class CodeListsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [CodeListResponse]
    def any_vehicle(policy_activity_id, opts = {})
      data, _status_code, _headers = any_vehicle_with_http_info(policy_activity_id, opts)
      data
    end

    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeListResponse, Fixnum, Hash)>] CodeListResponse data, response status code and response headers
    def any_vehicle_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeListsApi.any_vehicle ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CodeListsApi.any_vehicle"
      end
      # resource path
      local_var_path = '/v1/codes/policy_activities/{policyActivityId}/vehicles'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodeListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeListsApi#any_vehicle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [CodeListResponse]
    def driver_assignment(policy_activity_id, opts = {})
      data, _status_code, _headers = driver_assignment_with_http_info(policy_activity_id, opts)
      data
    end

    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeListResponse, Fixnum, Hash)>] CodeListResponse data, response status code and response headers
    def driver_assignment_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeListsApi.driver_assignment ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CodeListsApi.driver_assignment"
      end
      # resource path
      local_var_path = '/v1/codes/policy_activities/{policyActivityId}/driverassignment'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodeListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeListsApi#driver_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [CodeListResponse]
    def driver_model(policy_activity_id, opts = {})
      data, _status_code, _headers = driver_model_with_http_info(policy_activity_id, opts)
      data
    end

    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeListResponse, Fixnum, Hash)>] CodeListResponse data, response status code and response headers
    def driver_model_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeListsApi.driver_model ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CodeListsApi.driver_model"
      end
      # resource path
      local_var_path = '/v1/codes/policy_activities/{policyActivityId}/drivers'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodeListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeListsApi#driver_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [CodeListResponse]
    def general_info(policy_activity_id, opts = {})
      data, _status_code, _headers = general_info_with_http_info(policy_activity_id, opts)
      data
    end

    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeListResponse, Fixnum, Hash)>] CodeListResponse data, response status code and response headers
    def general_info_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeListsApi.general_info ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CodeListsApi.general_info"
      end
      # resource path
      local_var_path = '/v1/codes/policy_activities/{policyActivityId}/generalinfo'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodeListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeListsApi#general_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [CodeListResponse]
    def policy_applicant_modal(policy_activity_id, opts = {})
      data, _status_code, _headers = policy_applicant_modal_with_http_info(policy_activity_id, opts)
      data
    end

    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeListResponse, Fixnum, Hash)>] CodeListResponse data, response status code and response headers
    def policy_applicant_modal_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeListsApi.policy_applicant_modal ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CodeListsApi.policy_applicant_modal"
      end
      # resource path
      local_var_path = '/v1/codes/policy_activities/{policyActivityId}/applicants'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodeListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeListsApi#policy_applicant_modal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [CodeListResponse]
    def policy_coverages(policy_activity_id, opts = {})
      data, _status_code, _headers = policy_coverages_with_http_info(policy_activity_id, opts)
      data
    end

    # Gets Policy Code Value Lists based on resource name using policy level applicability
    # @param policy_activity_id policy activity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeListResponse, Fixnum, Hash)>] CodeListResponse data, response status code and response headers
    def policy_coverages_with_http_info(policy_activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeListsApi.policy_coverages ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CodeListsApi.policy_coverages"
      end
      # resource path
      local_var_path = '/v1/codes/policy_activities/{policyActivityId}/coverages'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodeListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeListsApi#policy_coverages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets Policy Code Value Lists based on resource name for vehicles using vehicle level applicability
    # @param policy_activity_id policy activity id
    # @param vehicle_id 
    # @param [Hash] opts the optional parameters
    # @return [CodeListResponse]
    def vehicle_coverages(policy_activity_id, vehicle_id, opts = {})
      data, _status_code, _headers = vehicle_coverages_with_http_info(policy_activity_id, vehicle_id, opts)
      data
    end

    # Gets Policy Code Value Lists based on resource name for vehicles using vehicle level applicability
    # @param policy_activity_id policy activity id
    # @param vehicle_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeListResponse, Fixnum, Hash)>] CodeListResponse data, response status code and response headers
    def vehicle_coverages_with_http_info(policy_activity_id, vehicle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeListsApi.vehicle_coverages ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CodeListsApi.vehicle_coverages"
      end
      # verify the required parameter 'vehicle_id' is set
      if @api_client.config.client_side_validation && vehicle_id.nil?
        fail ArgumentError, "Missing the required parameter 'vehicle_id' when calling CodeListsApi.vehicle_coverages"
      end
      # resource path
      local_var_path = '/v1/codes/policy_activities/{policyActivityId}/Vehicles/{vehicleId}/Coverages'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'vehicleId' + '}', vehicle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodeListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeListsApi#vehicle_coverages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets Policy Code Value Lists based on resource name for vehicles using vehicle level applicability
    # @param policy_activity_id policy activity id
    # @param vehicle_id 
    # @param [Hash] opts the optional parameters
    # @return [CodeListResponse]
    def vehicle_modal(policy_activity_id, vehicle_id, opts = {})
      data, _status_code, _headers = vehicle_modal_with_http_info(policy_activity_id, vehicle_id, opts)
      data
    end

    # Gets Policy Code Value Lists based on resource name for vehicles using vehicle level applicability
    # @param policy_activity_id policy activity id
    # @param vehicle_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeListResponse, Fixnum, Hash)>] CodeListResponse data, response status code and response headers
    def vehicle_modal_with_http_info(policy_activity_id, vehicle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeListsApi.vehicle_modal ...'
      end
      # verify the required parameter 'policy_activity_id' is set
      if @api_client.config.client_side_validation && policy_activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_activity_id' when calling CodeListsApi.vehicle_modal"
      end
      # verify the required parameter 'vehicle_id' is set
      if @api_client.config.client_side_validation && vehicle_id.nil?
        fail ArgumentError, "Missing the required parameter 'vehicle_id' when calling CodeListsApi.vehicle_modal"
      end
      # resource path
      local_var_path = '/v1/codes/policy_activities/{policyActivityId}/vehicles/{vehicleId}'.sub('{' + 'policyActivityId' + '}', policy_activity_id.to_s).sub('{' + 'vehicleId' + '}', vehicle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodeListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeListsApi#vehicle_modal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
